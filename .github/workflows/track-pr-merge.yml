name: Track PR Merge Statistics

on:
  pull_request:
    types: [closed]

jobs:
  track-developer-stats:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # not strictly required anymore, but useful for other steps

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract PR Details
        id: pr_details
        run: |
          # Extract PR information from GitHub context
          cat << EOF > pr-details.json
          {
            "prNumber": ${{ github.event.pull_request.number }},
            "user": "${{ github.event.pull_request.user.login }}",
            "mergedDate": "${{ github.event.pull_request.merged_at }}",
            "title": "${{ github.event.pull_request.title }}",
            "body": $(echo '${{ github.event.pull_request.body }}' | jq -Rs .),
            "filesChanged": ${{ github.event.pull_request.changed_files }},
            "additions": ${{ github.event.pull_request.additions }},
            "deletions": ${{ github.event.pull_request.deletions }},
            "mergedBy": "${{ github.event.pull_request.merged_by.login }}",
            "repository": "${{ github.repository }}",
            "headSha": "${{ github.event.pull_request.head.sha }}",
            "baseSha": "${{ github.event.pull_request.base.sha }}"
          }
          EOF

          echo "PR Details extracted:"
          cat pr-details.json

      - name: Get Changed Files List
        id: changed_files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the list of changed files
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            > changed-files.json

          # Extract just the necessary file information
          jq '[.[] | {filename: .filename, additions: .additions, deletions: .deletions, changes: .changes, status: .status}]' changed-files.json > files-summary.json

          echo "Changed files:"
          cat files-summary.json

      - name: Combine PR Data
        run: |
          # Merge PR details with changed files
          jq -s '.[0] + {changedFiles: .[1]}' pr-details.json files-summary.json > complete-pr-data.json

          echo "Complete PR data:"
          cat complete-pr-data.json

      - name: Estimate Development Time
        id: estimate
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: "10"
          direct_prompt: |
            Estimate development time for this merged PR and output ONLY the estimated hours as a number (e.g., "5.5" or "12.0").

            PR Data:
            PR Number: ${{ github.event.pull_request.number }}
            User: ${{ github.event.pull_request.user.login }}
            Title: ${{ github.event.pull_request.title }}
            Files Changed: ${{ github.event.pull_request.changed_files }}
            Additions: ${{ github.event.pull_request.additions }}
            Deletions: ${{ github.event.pull_request.deletions }}
            Merged Date: ${{ github.event.pull_request.merged_at }}
            Workspace ID: cme3e54et00028onui9epyx4w

            ## Estimation Process:

            1. **Parse the PR data** from the JSON above

            2. **Calculate Base Time** from total lines changed:
               - Less than 50 lines: 1.5 hours
               - 50-200 lines: 3 hours
               - 200-500 lines: 6 hours
               - Over 500 lines: 12 hours

            3. **Apply Multipliers** based on PR type (from title):
               - "feat:" prefix = 1.5x multiplier (new feature)
               - "fix:" prefix = 1.0x multiplier (bug fix)
               - "refactor:" prefix = 1.3x multiplier
               - "docs:" prefix = 0.5x multiplier
               - "test:" prefix = 0.8x multiplier
               - "chore:" prefix = 0.7x multiplier

            4. **Add Time for Special Files**:
               - Test files (*.test.js, *.spec.js, *.test.tsx): +25% of base time
               - Documentation (*.md files): +15% of base time
               - Database migrations (prisma/migrations/*): +2 hours
               - GitHub workflows (.github/workflows/*): +1 hour
               - Config files (package.json, tsconfig.json, etc.): +0.5 hours
               - Multiple file types (e.g., both frontend and backend): +20% of base time

            5. **Analyze the changed files** from changedFiles array:
               - Check if any are test files
               - Check if any are documentation
               - Check if any are migrations
               - Check if any are GitHub workflows
               - Check if both .jsx/.tsx and .js/.ts files are present (frontend + backend)

            6. **Calculate Final Estimate**:
               - Start with base time
               - Apply PR type multiplier
               - Add percentages for tests/docs if present
               - Add fixed hours for special file types
               - Round to nearest 0.5 hour

            7. **Return Result**:
               Output ONLY the final calculated hours as a decimal number.
               Do not include any other text, markdown, or explanation.
               Just the number (e.g., "5.5" or "12.0").

      - name: Extract hours from Claude execution log
        id: extract_hours
        run: |
          set -euo pipefail

          LOG="${{ steps.estimate.outputs.execution_file }}"
          if [ -z "${LOG:-}" ]; then
            LOG="/home/runner/work/_temp/claude-execution-output.json"
          fi

          echo "Execution log: $LOG"
          if [ ! -f "$LOG" ]; then
            echo "Execution file not found: $LOG"
            exit 1
          fi

          # Prefer the numeric body from a tool_use event; fallback to assistant text content
          HOURS=$(
            jq -r '
              # 1) Tool-use body where Claude may have posted pure number (preferred)
              (.. | objects
               | select(.type? == "tool_use" and .name? == "mcp__github_comment__update_claude_comment")
               | .input.body?),

              # 2) Any assistant text content (fallback)
              (.. | objects
               | select(.role? == "assistant" or .type? == "assistant_message")
               | .content? // []
               | map(select(type=="object" and .type=="text" and (.text|type=="string")) | .text)
               | .[])
            ' "$LOG" \
            | tr -d '\r' \
            | grep -Eo '[0-9]+(\.[0-9]+)?' \
            | tail -n1
          )

          if [ -z "${HOURS:-}" ] || ! echo "$HOURS" | grep -Eq '^[0-9]+(\.[0-9]+)?$'; then
            echo "Could not parse hours from Claude output. Full log follows:"
            cat "$LOG"
            exit 1
          fi

          echo "Parsed hours: $HOURS"
          echo "hours=$HOURS" >> "$GITHUB_OUTPUT"

      - name: Save Developer Statistics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          ESTIMATED_TIME="${{ steps.extract_hours.outputs.hours }}"

          # Get commit count to determine if this is a "first try" (â‰¤2 commits)
          COMPARE_JSON=$(curl -sS \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }}")

          COMMIT_COUNT=$(echo "$COMPARE_JSON" | jq -r '.ahead_by // 0')
          
          # Determine if this is a "first try" PR (2 or fewer commits)
          if [ "$COMMIT_COUNT" -le 2 ]; then
            FIRST_TRY="true"
          else
            FIRST_TRY="false"
          fi

          API_URL="${{ secrets.API_URL }}"
          if [ -z "${API_URL:-}" ]; then
            API_URL="https://ckye-fe.vercel.app"
          fi

          echo "Posting to $API_URL/api/developer-statistics with estimatedTime=$ESTIMATED_TIME and firstTry=$FIRST_TRY"
          echo "Commit count: $COMMIT_COUNT"

          curl -sS -X POST "$API_URL/api/developer-statistics" \
            -H "Content-Type: application/json" \
            -d "{
              \"user\": \"${{ github.event.pull_request.user.login }}\",
              \"workspaceId\": \"cme3e54et00028onui9epyx4w\",
              \"prNumber\": ${{ github.event.pull_request.number }},
              \"mergedDate\": \"${{ github.event.pull_request.merged_at }}\",
              \"estimatedTime\": \"${ESTIMATED_TIME}\",
              \"firstTry\": ${FIRST_TRY}
            }"

          echo
          echo "Developer statistics saved successfully (firstTry: $FIRST_TRY)"

      - name: Check for Claude Page ID in Comments
        id: check_claude
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          echo "Fetching PR comments..."
          COMMENTS=$(curl -sS -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          # Extract Page ID from comments (looking for pattern: "Page ID: <id>")
          PAGE_ID=$(echo "$COMMENTS" | jq -r '.[].body' | grep -oP 'Page ID:\s*\K[a-z0-9]+' | head -n1 || true)
          
          if [ -n "$PAGE_ID" ]; then
            echo "Found Claude Page ID: $PAGE_ID"
            echo "page_id=$PAGE_ID" >> "$GITHUB_OUTPUT"
            echo "is_claude=true" >> "$GITHUB_OUTPUT"
          else
            echo "No Claude Page ID found in comments"
            echo "is_claude=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update Page Statistics
        if: steps.check_claude.outputs.is_claude == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          PAGE_ID="${{ steps.check_claude.outputs.page_id }}"

          # Use GitHub Compare API to get commit count between base and head (avoids local git history issues)
          COMPARE_JSON=$(curl -sS \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }}")

          # ahead_by is number of commits the head is ahead of base (what we want)
          COMMIT_COUNT=$(echo "$COMPARE_JSON" | jq -r '.ahead_by // 0')

          API_URL="${{ secrets.API_URL }}"
          if [ -z "${API_URL:-}" ]; then
            API_URL="https://ckye-fe.vercel.app"
          fi

          echo "Updating page statistics for Page ID: $PAGE_ID"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Commit Count: $COMMIT_COUNT"

          # Call API to update page statistics
          RESPONSE=$(curl -sS -X POST "$API_URL/api/page-statistics" \
            -H "Content-Type: application/json" \
            -d "{
              \"pageId\": \"$PAGE_ID\",
              \"commitCount\": $COMMIT_COUNT
            }")

          echo "API Response: $RESPONSE"
          echo "Page statistics updated successfully"

      - name: Create Summary
        if: always()
        run: |
          echo "## PR Development Time Tracking" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Merged By**: @${{ github.event.pull_request.merged_by.login }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Changed**: ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Lines Added**: ${{ github.event.pull_request.additions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Lines Deleted**: ${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Estimated Hours**: ${{ steps.extract_hours.outputs.hours }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Count (head vs base)**: $( \
            curl -sS -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }}" \
            | jq -r '.ahead_by // 0' \
          )" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_claude.outputs.is_claude }}" == "true" ]; then
            echo "- **Claude Contribution**: Yes (Page ID: ${{ steps.check_claude.outputs.page_id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Claude Contribution**: No" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for the estimated development time and breakdown." >> $GITHUB_STEP_SUMMARY
