generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  userType       String          @default("Member")
  avatar         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  admin          Boolean         @default(false)
  userWorkspaces UserWorkspace[]

  @@index([email])
  @@map("users")
}

model Workspace {
  id             String          @id @default(cuid())
  name           String          @unique
  shortName      String?
  status         String          @default("active")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userWorkspaces UserWorkspace[]

  @@index([name])
  @@map("workspaces")
}

model UserWorkspace {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  joinedAt    DateTime  @default(now())
  role        String    @default("member")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
  @@map("user_workspaces")
}

model Page {
  id         String   @id @default(cuid())
  name       String
  content    String
  company    String
  statistics Json?    // Track PR success rates: {totalPRs: 0, firstTrySuccess: 0, secondTrySuccess: 0}
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([company])
  @@map("pages")
}

model Suggestion {
  id            String   @id @default(cuid())
  content       String   @db.Text
  workspaceName String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([workspaceName])
  @@map("suggestions")
}

model Variant {
  id            String   @id @default(cuid())
  content       String   @db.Text
  summary       String?  @db.Text
  workspaceName String
  createdBy     String?  // User ID who created the variant
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([workspaceName])
  @@index([createdBy])
  @@map("variants")
}

model Experiment {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  pageId        String?   // Page ID associated with the experiment
  variantId     String?
  workspaceName String
  status        String    @default("inactive") // active, inactive, completed
  startDate     DateTime?
  endDate       DateTime?
  metrics       Json? // Store experiment metrics as JSON
  createdBy     String? // User ID who created the experiment
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([workspaceName])
  @@index([status])
  @@index([variantId])
  @@index([pageId])
  @@map("experiments")
}

model PR {
  id             String    @id @default(cuid())
  prNumber       Int       // GitHub PR number
  prUrl          String    // Full GitHub PR URL
  company        String    // Company this PR is for
  title          String    // PR title
  description    String?   @db.Text // PR description
  initialCommits Int       // Number of commits when PR was created
  currentCommits Int?      // Current number of commits
  status         String    @default("open") // open, merged, closed
  merged         Boolean   @default(false)
  mergedAt       DateTime?
  firstTry       Boolean?  // Was it successful on first try (1-2 commits)?
  secondTry      Boolean?  // Was it successful on second try (3-4 commits)?
  reviewed       Boolean   @default(false) // Have we reviewed this PR yet?
  reviewedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([company])
  @@index([status])
  @@index([reviewed])
  @@map("prs")
}
