// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  userType       String          @default("Member")
  avatar         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userWorkspaces UserWorkspace[]

  @@index([email])
  @@map("users")
}

model Workspace {
  id             String          @id @default(cuid())
  name           String          @unique
  shortName      String?
  status         String          @default("active")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userWorkspaces UserWorkspace[]

  @@index([name])
  @@map("workspaces")
}

model UserWorkspace {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  joinedAt    DateTime @default(now())
  role        String   @default("member")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
  @@map("user_workspaces")
}

model Page {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text
  company   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([company])
  @@map("pages")
}
